let createError = require('http-errors');
let shortid = require('shortid');

let User = require("../database/model/users");
let { invalidRes } = require('../config');
let i;

//checking same origin of request and https protocol
const checkURLDetailsPage = (req, res, next)=>{
	invalidRes.data = "Invalid host OR Insecure protcols";
	console.log(req.protocol, req.hostname);
	if (process.env.NODE_ENV === 'PRODUCTION'){
		((req.protocol === "https") && (req.hostname === "www.mrnotes.me" || req.host === "mrnote.herokuapp.com")) ? next():next(createError(505));
	}else
		next();
};

//checking same origin of request and https protocol
const checkURLDetailsJSON = (req, res, next)=>{
	invalidRes.data = "Invalid host OR Insecure protcols";
	console.log(req.protocol, req.hostname);
	if (process.env.NODE_ENV === 'PRODUCTION'){
		((req.protocol === "https") && (req.hostname === "www.mrnotes.me" || req.host === "mrnote.herokuapp.com")) ? next():res.status(505).json(invalidRes);
	}else
		next();
};

//data validation of login or signup page 
const bodyDataValidCred = (req, res, next)=>{
	for (i in req.body){
		if (req.body[`${i}`] != ('' || null)){
			res.status(302).redirect(`${req.path}/?q=Invalid User Details`);
			break;
		}
	}
	next();
}; 

//data validation 
const bodyDataValidJSON = (req, res, next)=>{
	//console.log(req.path);
	invalidRes.data = "Invalid Data";
	for (i in req.body){
		if (req.body[`${i}`] != ('' || null)){
			res.json(invalidRes);
			break;
		}
	} 
	next();
}; 

//user cookies validation
const cookieValid = (req, res, next) =>{
	//extracting cookies from req parameter
  	let cookie = req.cookies.token;
	if (cookie != null){
		/*.populate("notes")*/
		User.findOne({cookie}).exec((err, data)=>{
			if (err) throw console.error.bind(err);
			if (data){
				req.data = data;
				//calling next process
				next();
			}else
				res.status(302).redirect("/login-signup");		  
		});	
	}else
		res.status(302).redirect("/login-signup");
};

//uid validation generated by shortid
const validId = (req, res, next) => {
	flag = true;
	//console.log(req.params);
	for(i in req.params){
		//console.log(shortid.isValid(req.params[`${i}`]), req.params[`${i}`]);
		flag = (shortid.isValid(req.params[`${i}`])) ? true: false;
	}
	//console.log(flag);
	flag ? next():res.json(invalidRes);
};

module.exports = { bodyDataValidCred, bodyDataValidJSON, validId, cookieValid, checkURLDetailsPage, checkURLDetailsJSON };